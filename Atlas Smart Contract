// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract EStablecoin is ERC20, Ownable {
    // Price feed interface
    interface IElectricityPriceOracle {
        function getElectricityPrice() external view returns (uint256);
    }

    IElectricityPriceOracle public oracle;
    uint256 public constant TARGET_PRICE = 16 * 10**16; // $0.16 per kWh in wei
    uint256 public constant LOWER_BOUND = 10 * 10**16; // $0.10 per kWh in wei
    uint256 public constant UPPER_BOUND = 16 * 10**16; // $0.16 per kWh in wei
    uint256 public constant ADJUSTMENT_THRESHOLD = 5 * 10**15; // $0.005 in wei

    constructor(address _oracle) ERC20("Electricity Stablecoin", "ESTABLE") {
        oracle = IElectricityPriceOracle(_oracle);
    }

    function mint(address to, uint256 amount) external onlyOwner {
        _mint(to, amount);
        _adjustSupply();
    }

    function burn(uint256 amount) external {
        _burn(msg.sender, amount);
        _adjustSupply();
    }

    function _adjustSupply() internal {
        uint256 currentPrice = oracle.getElectricityPrice();
        
        if (currentPrice < LOWER_BOUND) {
            uint256 burnAmount = totalSupply() * (LOWER_BOUND - currentPrice) / LOWER_BOUND;
            _burn(address(this), burnAmount);
        } else if (currentPrice > UPPER_BOUND) {
            uint256 mintAmount = totalSupply() * (currentPrice - UPPER_BOUND) / UPPER_BOUND;
            _mint(address(this), mintAmount);
        }
    }

    function setOracle(address _oracle) external onlyOwner {
        oracle = IElectricityPriceOracle(_oracle);
    }
}
