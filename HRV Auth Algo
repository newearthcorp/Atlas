import numpy as np
import hashlib
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler

# HRV-related functions
def calculate_sdnn(nn_intervals):
    mean_nn = np.mean(nn_intervals)
    sdnn = np.sqrt(np.mean((nn_intervals - mean_nn) ** 2))
    return sdnn

def calculate_rmssd(nn_intervals):
    successive_diff = np.diff(nn_intervals)
    rmssd = np.sqrt(np.mean(successive_diff ** 2))
    return rmssd

def calculate_ratio(sdnn, rmssd):
    return sdnn / rmssd if rmssd != 0 else 0

# Utility functions
def convert_to_binary(value, bits=8):
    return format(value, f'0{bits}b')

def gender_to_binary(gender):
    return '1' if gender == 'M' else '0'

def xor_operation(bin1, bin2):
    return format(int(bin1, 2) ^ int(bin2, 2), '032b')

# Facial recognition function
def facial_recognition_score(face_features):
    pca = PCA(n_components=5)
    face_features_pca = pca.fit_transform(face_features.reshape(1, -1))
    distance = np.linalg.norm(face_features_pca)
    score = 1 - min(distance / 10, 1)
    return score

# Vein pattern recognition function
def vein_pattern_score(vein_pattern):
    mean = np.mean(vein_pattern)
    std = np.std(vein_pattern)
    score = (mean + std) / 2
    return score

# Score fusion function
def fuse_scores(hrv_score, face_score, vein_score, weights=None):
    if weights is None:
        weights = [1/3, 1/3, 1/3]  # Equal weights by default
    
    # Normalize HRV score (assuming it's in the range [0, 2])
    normalized_hrv_score = min(hrv_score / 2, 1)
    
    # Combine scores using weighted sum
    fused_score = (
        weights[0] * normalized_hrv_score +
        weights[1] * face_score +
        weights[2] * vein_score
    )
    
    return fused_score

# Key generation function
def generate_key(fused_score, age, gender):
    binary_score = convert_to_binary(int(fused_score * 1000), 32)
    binary_age = convert_to_binary(age, 32)
    binary_gender = gender_to_binary(gender).zfill(32)
    
    key = xor_operation(binary_score, binary_age)
    key = xor_operation(key, binary_gender)
    
    return key

# Hash function
def hash_key(key):
    sha256 = hashlib.sha256()
    sha256.update(key.encode())
    return sha256.hexdigest()

# Main authentication function
def authenticate(nn_intervals, age, gender, face_features, vein_pattern, weights=None):
    # HRV calculations
    sdnn = calculate_sdnn(np.array(nn_intervals))
    rmssd = calculate_rmssd(np.array(nn_intervals))
    hrv_score = calculate_ratio(sdnn, rmssd)
    
    # Facial recognition
    face_score = facial_recognition_score(face_features)
    
    # Vein pattern recognition
    vein_score = vein_pattern_score(vein_pattern)
    
    # Fuse scores
    fused_score = fuse_scores(hrv_score, face_score, vein_score, weights)
    
    # Generate authentication key
    auth_key = generate_key(fused_score, age, gender)
    
    # Hash the key
    hashed_key = hash_key(auth_key)
    
    return {
        'sdnn': sdnn,
        'rmssd': rmssd,
        'hrv_score': hrv_score,
        'face_score': face_score,
        'vein_score': vein_score,
        'fused_score': fused_score,
        'auth_key': auth_key,
        'hashed_key': hashed_key
    }

# Example usage
if __name__ == "__main__":
    nn_intervals = [800, 810, 790, 805, 780, 795, 810, 800]
    age = 25
    gender = 'M'
    face_features = np.random.rand(128)  # Simulated 128-dimensional face embedding
    vein_pattern = np.random.rand(64)   # Simulated 64-point vein pattern

    # Custom weights (optional)
    custom_weights = [0.4, 0.3, 0.3]  # Emphasize HRV score

    result = authenticate(nn_intervals, age, gender, face_features, vein_pattern, weights=custom_weights)

    for key, value in result.items():
        print(f"{key}: {value}")

    # Threshold-based decision (example)
    authentication_threshold = 0.7
    if result['fused_score'] >= authentication_threshold:
        print("Authentication successful!")
    else:
        print("Authentication failed.")
